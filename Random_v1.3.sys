%%%
	VERSION: 1.3
	LANGUAGE: ENGLISH
%%%

MODULE Random(SYSMODULE, NOVIEW)
    !/*
    !   This Random Number Generator is based on the algorithm in a FORTRAN
    !   version published by George Marsaglia and Arif Zaman, Florida State
    !   University; ref.: see original comments below.
    !   At the fhw (Fachhochschule Wiesbaden, W.Germany), Dept. of Computer
    !   Science, we have written sources in further languages (C, Modula-2
    !   Turbo-Pascal(3.0, 5.0), Basic and Ada) to get exactly the same test
    !   results compared with the original FORTRAN version.
    !   April 1989
    !   Karl-L. Noell <NOELL@DWIFH1.BITNET>
    !      and  Helmut  Weber <WEBER@DWIFH1.BITNET>

    !   This random number generator originally appeared in "Toward a Universal
    !   Random Number Generator" by George Marsaglia and Arif Zaman.
    !   Florida State University Report: FSU-SCRI-87-50 (1987)
    !   It was later modified by F. James and published in "A Review of Pseudo-
    !   random Number Generators"
    !   THIS IS THE BEST KNOWN RANDOM NUMBER GENERATOR AVAILABLE.
    !   (However, a newly discovered technique can yield
    !   a period of 10^600. But that is still in the development stage.)
    !   It passes ALL of the tests for random number generators and has a period
    !   of 2^144, is completely portable (gives bit identical results on all
    !   machines with at least 24-bit mantissas in the floating point
    !   representation).
    !   The algorithm is a combination of a Fibonacci sequence (with lags of 97
    !   and 33, and operation "subtraction plus one, modulo one") and an
    !   "arithmetic sequence" (using subtraction).

    !   Use IJ = 1802 & KL = 9373 to test the random number generator. The
    !   subroutine RANMAR should be used to generate 20000 random numbers.
    !   Then display the next six random numbers generated multiplied by 4096*4096
    !   If the random number generator is working properly, the random numbers
    !   should be:
    !           6533892.0  14220222.0  7275067.0
    !           6172232.0  8354498.0   10633180.0
    !*/

    !Adapted to RAPID by NRAPP, 2019. 
    !VERSIONS:
    ! 				1.0 - Created
    !				1.1 - Made u PERS Array so we dont have to initialize every time. 
    !               1.2 - Added RandArrayIndex
    !               1.3 - Removed RandArrayIndex, Created Documentation, Created Add-in

    LOCAL PERS num u{97}:=[0.839048,0.636226,0.299001,0.163905,0.770649,0.211223,0.711858,0.755601,0.390398,0.299951,0.313664,0.629294,0.483922,0.946104,0.832832,0.966903,0.031405,0.586492,0.367731,0.921545,0.126277,0.774575,0.060048,0.44894,0.815527,0.96045,0.423954,0.796056,0.037862,0.301772,0.796282,0.00732577,0.431532,0.351609,0.531182,0.834986,0.070072,0.115227,0.926515,0.323289,0.920401,0.761101,0.524623,0.857742,0.347927,0.310426,0.49526,0.528065,0.458292,0.989908,0.234488,0.747075,0.900644,0.448327,0.713269,0.472095,0.338104,0.176892,0.873863,0.904667,0.113511,0.850369,0.815274,0.755633,0.647919,0.602514,0.00531095,0.940845,0.446689,0.485731,0.295153,0.414102,0.885364,0.712984,0.447715,0.882335,0.937194,0.52718,0.915396,0.564326,0.20125,0.14185,0.955688,0.416813,0.730919,0.563184,0.34692,0.0779849,0.474989,0.81607,0.890623,0.784702,0.387209,0.518208,0.477311,0.63111,0.744222];
    LOCAL PERS num c:=0.369232;
    LOCAL PERS num cd:=0.456233;
    LOCAL PERS num cm:=1;
    LOCAL PERS num i97:=52;
    LOCAL PERS num j97:=84;

    !To start at the same seed point, every time,
    ! Set this to FALSE; 
    LOCAL PERS bool bTest:=TRUE;

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    !   This is the initialization routine for the random number generator.
    !   NOTE: The seed variables can have values between:   
    !   0 <= IJ <= 31328
    !   0 <= KL <= 30081
    !   The random number sequences created by these two seeds are of sufficient
    !   length to complete an entire calculation with. For example, if sveral
    !   different groups are working on different parts of the same calculation,
    !   each group could be assigned its own IJ seed. This would leave each group
    !   with 30000 choices for the second seed. That is to say, this random
    !   number generator can create 900 million different subsequences -- withv
    !   each subsequence having a length of approximately 10^30.

    !This function initializes the Random Number generator: 
    LOCAL PROC RandomInitialize(num ij,num kl)
        VAR num s;
        VAR num t;
        VAR num i;
        VAR num j;
        VAR num k;
        VAR num l;
        VAR num m;

        IF (ij<0) OR (ij>31328) OR (kl<0) OR (kl>30081) THEN
            ij:=1802;
            kl:=9373;
        ENDIF

        i:=(Trunc(ij/177) MOD 177)+2;
        j:=(ij MOD 177)+2;
        k:=(Trunc(kl/169) MOD 178)+1;
        l:=(kl MOD 169);

        FOR ii FROM 1 TO 97 STEP 1 DO
            s:=0.0;
            t:=0.5;
            FOR jj FROM 0 TO 23 STEP 1 DO
                m:=(((i*j) MOD 179)*k) MOD 179;
                i:=j;
                j:=k;
                k:=m;
                l:=(63*l+1) MOD 169;
                IF (((l*m MOD 64))>=32) THEN
                    s:=s+t;
                ENDIF
                t:=t*0.5;
            ENDFOR
            u{ii}:=s;
        ENDFOR

        c:=362436.0/16777216.0;
        cd:=7654321.0/16777216.0;
        cm:=16777213.0/16777216.0;
        i97:=97;
        j97:=33;
        bTest:=TRUE;
    ENDPROC

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    !Returns a Random number from 0 to 1
    FUNC num RandomUniform()
        VAR num uni;
        IF (NOT bTest) RandomInitialize 1802,9373;
        uni:=u{i97-1}-u{j97-1};
        IF (uni<=0.0) Incr uni;
        u{i97-1}:=uni;
        Decr i97;
        IF (i97=1) i97:=97;
        Decr j97;
        IF (j97=1) j97:=97;
        c:=c-cd;
        IF (c<0.0) c:=c+cm;
        uni:=uni-c;
        IF (uni<0.0) Incr uni;
        RETURN uni;
    ENDFUNC

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    !  ALGORITHM 712, COLLECTED ALGORITHMS FROM ACM.
    !  THIS WORK PUBLISHED IN TRANSACTIONS ON MATHEMATICAL SOFTWARE,
    !  VOL. 18, NO. 4, DECEMBER, 1992, PP. 434-435.
    !  The function returns a normally distributed pseudo-random number
    !  with a given mean and standard devaiation.  Calls are made to a
    !  function subprogram which must return independent random
    !  numbers uniform in the interval (0,1).
    !  The algorithm uses the ratio of uniforms method of A.J. Kinderman
    !  and J.F. Monahan augmented with quadratic bounding curves.

    !Returns Normally Distributed Random numbers,
    !Around a mean, with a given standard deviation
    !WARNING: The LOG FUNCTION IS RECURSIVE
    !We need a NON- RECURSIVE log function,
    !else we could crash the system: 
    FUNC num RandomGausian(num Mean,num StdDev)
        VAR num q;
        VAR num u;
        VAR num v;
        VAR num x;
        VAR num y;

        !Do: 
        u:=RandomUniform();
        v:=RandomUniform();
        IF (u<=0.0) OR (v<=0.0) THEN
            u:=1.0;
            v:=1.0;
        ENDIF
        v:=1.7156*(v-0.5);
        x:=u-0.449871;
        y:=Abs(v)+0.386595;
        q:=x*x+y*(0.19600*y-0.25472*x);
        IF (q<0.27597) RETURN (mean+stddev*v/u);

        WHILE ((q>0.27846) OR (v*v>(-4.0*Log(u)*u*u))) DO
            u:=RandomUniform();
            v:=RandomUniform();
            IF (u<=0.0) OR (v<=0.0) THEN
                u:=1.0;
                v:=1.0;
            ENDIF
            v:=1.7156*(v-0.5);
            x:=u-0.449871;
            y:=Abs(v)+0.386595;
            q:=x*x+y*(0.19600*y-0.25472*x);
            IF (q<0.27597) RETURN (mean+stddev*v/u);
        ENDWHILE
    ENDFUNC

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !Returns a number bounded by the upper and lower
    FUNC num RandomInt(num Lower,num Upper)
        RETURN Trunc(RandomUniform()*(upper-lower+1)+lower);
    ENDFUNC

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    !Returns a number bounded by the upper and lower
    FUNC num RandomFloat(num Lower,num Upper)
        RETURN RandomUniform()*(upper-lower)+lower;
    ENDFUNC

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !Support Function, Written by NRAPP.
    !Currently RAPID does not have a LOG function.
    !Returns the LOG base E of a number: 
    LOCAL FUNC num Log(num n)
        CONST num e:=2.71828;
        IF (n>1)  RETURN 1+Log(n/e); 
        RETURN 0;
    ENDFUNC
ENDMODULE